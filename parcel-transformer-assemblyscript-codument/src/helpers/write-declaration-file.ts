import * as fs from "fs";
import { dbg } from "../dbg";
import path from "path";

const PREF = "[ASC][WDF]";

function figureOutPaths(pathToDTS: string): {
  filename: string;
  directories: string;
} {
  // path.isAbsolute()
  const filename = path.basename(pathToDTS);
  const directories: string = path.dirname(pathToDTS);

  return { filename, directories };
}

/**
 * Write types for the WASM module to the disk.
 * The `.d.ts` file should contain all the signatures of callable function and accessible properties of the WASM module.
 * @param content
 * @param pathToDTS
 */
export function writeDeclarationFile(content: string, pathToDTS: string) {
  if (!content) {
    dbg.error(`${PREF} '.d.ts' has no content!`);
    return;
  }

  // TODO:
  // TODO:
  // TODO: Seems to work at first glance, but needs more testing!!!
  // TODO:
  // TODO:

  const { filename, directories } = figureOutPaths(pathToDTS);

  // Create the directories recursively if they do not exist
  fs.mkdirSync(directories, { recursive: true });

  const topComment = `/** ATTENTION: This file is autogenerated by AssemblyScript compiler, please do not edit manually. */`;
  const typeExport = `/** Shape of the WASM module compiled from AssemblyScript */\nexport type WasmModule = typeof __AdaptedExports;`;
  const declarationFileContent = `${topComment}\n${content}\n${typeExport}`;

  const absolutePath = path.resolve(directories, filename);
  dbg.log(`${PREF} Writing '.d.ts' data to file: ${absolutePath}`);

  try {
    fs.writeFileSync(absolutePath, declarationFileContent, {});
    dbg.log(`${PREF} '.d.ts' file written successfully!`);
  } catch (error) {
    dbg.error(`${PREF} Error writing to file: ${error}`);
  }
}
